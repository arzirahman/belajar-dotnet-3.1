@model CarListView
@using Coba_Net.Utils
@{

    ViewData["Title"] = "Car List";
    var headers = new[] { "Name", "Brand", "Color", "Price", "Action" };
    var keys = new[] { "Name", "Brand", "Color", "Price" };
    var tableProps = new TableProps {
        Headers = headers,
        Keys = keys,
        List = Model.Cars,
        UpdatePath = "/Car/Edit",
        DeletePath = "/Car/Delete",
        BodyFormatter = (key, value) => {
            if(key == "Price")
            {
                var formatter = new Formatter();
                return formatter.FormatMoney(value);
            }
            else
                return value;
        }
    };
    var searchBarProps = new SearchBarProps {
        SearchValue = Model.Pagination.Search,
        SearchPath = "/Car/Index",
        ButtonPath = "/Car/Add",
        ButtonLabel = "Add Car",
        DownloadPath = "/Car/Download"
    };
    var paginationProps = new PaginationProps {
        Pagination = Model.Pagination,
        Path = "/Car/Index",
        Count = Model.Cars.Count
    };
}

@await Html.PartialAsync("~/Views/Shared/Sidebar.cshtml")
<div class="flex flex-col gap-10 pb-10 h-full overflow-y-auto flex-1">
    <div class="flex w-full p-6 px-10 shadow-lg text-2xl font-bold bg-[#202020]">
        <span>Car List:</span>
    </div>

    @await Html.PartialAsync("~/Views/Shared/SearchBar.cshtml", searchBarProps)

    <div class="px-10 w-full">
        <div class="bg-[#1e1e1e] shadow-lg rounded-xl w-full">
            @if (Model.Cars.Count > 0)
            {
                @await Html.PartialAsync("~/Views/Shared/Table.cshtml", tableProps);
                @await Html.PartialAsync("~/Views/Shared/Pagination.cshtml", paginationProps);
            }
            else
            {
                @await Html.PartialAsync("~/Views/Shared/EmptyData.cshtml")
            }
        </div>
    </div>
</div>